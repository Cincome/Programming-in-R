print x
print(x)
x <- 4L
print attributes(x)
print attributes
attributes(x)
library(datasets)
data(iris)
?iris
mean(iris)
View(iris)
s<- split(iris, iris$species)
head(iris)
s<- split(iris, iris$Species)
lapply(s, function(x), colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
view(mtcars)
View(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls()
?names
setwd("~/Documents/Datasciencecoursera/ProgrammingAssignment3")
data<- read.csv("outcome-of-care-measures.csv", colClasses= "character")
data<- data[c(2,7,11,17,23)]
names(data)[1]<- "name"
names(data)[2]<- "state"
names(data)[3]<- "heart attack"
names(data)[4]<- "heart failure"
names(data)[5]<- "pneumonia"
outcomes =c("heart attack", "heart failure", "pneumonia")
if (outcome %in% outcomes ==FALSE){
stop("invalid outcome")
}
states <- data[,2]
states <- unique(states)
data <- data[data$state==state & data[outcome] != "Not Available". ]
vals <- data[, outcome]
source('best.R')
source("best.R")
source('best.R')
best("TX", "heart attack")
best("MD", "heart attack")
best("BB", "heart attack")
data<- read.csv("outcome-of-care-measures.csv", colClasses= "character")
data<- data[c(2,7,11,17,23)]
names(data)[1]<- "name"
names(data)[2]<- "state"
names(data)[3]<- "heart attack"
names(data)[4]<- "heart failure"
names(data)[5]<- "pneumonia"
source("rankhospital.R")
source('rankhospital.R')
source('rankhospital.R')
source('rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
data<- data[order(data$name, decreasing =FALSE), ]
source('rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source('rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("rankall.R")
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num="best" ){
##read data
data<- read.csv("outcome-of-care-measures.csv", colClasses= "character")
##Filter col names
data<- data[c(2,7,11,17,23)]
names(data)[1]<- "name"
names(data)[2]<- "state"
names(data)[3]<- "heart attack"
names(data)[4]<- "heart failure"
names(data)[5]<- "pneumonia"
##validate outcomes
outcomes =c("heart attack", "heart failure", "pneumonia")
if (outcome %in% outcomes ==FALSE){
stop("invalid outcome")
}
## validate state
states <- data[, 2]
states <- unique(states)
if (state %in% states ==FALSE){
stop("invalid state")
}
if (num != "best" && num != "worst" && num%%1 != 0){
stop("invalid num")
}
## get rows with state value
data <- data[data[outcome] != "Not Available", ]
## order data
data[outcome]<- as.data.frame(sapply(data[outcome], as.numeric))
data<- data[order(data$name, decreasing =FALSE), ]
data<- data[order(data[outcome], decreasing =FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
